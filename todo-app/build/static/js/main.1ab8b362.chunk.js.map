{"version":3,"sources":["components/Todo.js","components/FilterButton.js","components/Form.js","App.js","index.js"],"names":["Todo","props","useState","isEditing","setEditing","newName","setNewName","wasEditing","value","ref","useRef","useEffect","current","usePrevious","editFeildRef","editButtonRef","editingTemplate","className","onSubmit","e","preventDefault","editTask","id","htmlFor","name","type","onChange","target","onClick","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","focus","FilterButton","aria-pressed","isPressed","setFilter","Form","setName","MyClock","Date","setValue","interval","setInterval","clearInterval","style","margin","width","addTask","required","Math","ceil","random","autoComplete","class","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","updatedTasks","map","taskList","filterList","tasksNoun","length","headingText","remainingTasks","editedTaskList","newTask","nanoid","role","aria-labelledby","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.1ab8b362.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\n\nfunction usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current\n}\n\n\n\nexport default function Todo(props) {\n    const [isEditing, setEditing] = useState(false)\n    const [newName, setNewName] = useState('');\n    const wasEditing = usePrevious(isEditing);\n\n    const editFeildRef = useRef(null);\n    const editButtonRef = useRef(null);\n\n    function handleChange(e) {\n        setNewName(e.target.value)\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault()\n        props.editTask(props.id, newName);\n        setNewName('');\n        setEditing(false);\n    }\n\n    const editingTemplate = (\n        <form className=\"stack-small\" onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n                <label className=\"todo-label\" htmlFor={props.id}>\n                    Hi enter a new name for {props.name}\n                </label>\n                <input id={props.id}\n                    className=\"todo-text\"\n                    type=\"text\"\n                    value={newName}\n                    onChange={handleChange}\n                    ref={editFeildRef} />\n            </div>\n            <div className=\"btn-group\">\n                <button type=\"button\" className=\"btn todo-cancel\" onClick={() => setEditing(false)}>\n                    Cancel\n                    <span className=\"visually-hidden\">renaming {props.name}</span>\n                </button>\n                <button type=\"submit\" className=\"btn btn__primary todo-edit\">\n                    Save\n                    <span className=\"visually-hidden\">new name for {props.name}</span>\n                </button>\n            </div>\n        </form>\n    );\n    const viewTemplate = (\n        <div className=\"stack-small\">\n            <div className=\"c-cb\">\n                <input\n                    id={props.id}\n                    type=\"checkbox\"\n                    defaultChecked={props.completed}\n                    onChange={() => props.toggleTaskCompleted(props.id)}\n                />\n                <label className=\"todo-label\" htmlFor={props.id}>\n                    {props.name}\n                </label>\n            </div>\n            <div className=\"btn-group\">\n                <button type=\"button\"\n                    className=\"btn\"\n                    onClick={() => setEditing(true)}\n                    ref={editButtonRef}\n                >\n                    Edit <span className=\"visually-hidden\">{props.name}</span>\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"btn btn__danger\"\n                    onClick={() => props.deleteTask(props.id)}\n                >\n                    Delete <span className=\"visually-hidden\">{props.name}</span>\n                </button>\n            </div>\n        </div>\n    );\n    useEffect(() => {\n\n        if (!wasEditing && isEditing) {\n            editFeildRef.current.focus()\n        } else {\n            editButtonRef.current.focus()\n        }\n    }, [isEditing,wasEditing])\n\n    return (\n        <li className=\"todo \">\n            {isEditing ? editingTemplate : viewTemplate}\n\n        </li>\n    );\n}","import React from 'react';\n\nfunction FilterButton(props) {\n    return (<button type=\"button\" className=\"btn toggle-btn\" aria-pressed={props.isPressed} onClick={() => props.setFilter(props.name)}>\n        <span className=\"visually-hidden\">Show </span>\n        <span>{props.name}</span>\n        <span className=\"visually-hidden\"> tasks</span>\n    </button>)\n}\n\nexport default FilterButton;","\nimport React, { useEffect, useState } from 'react';\nimport Clock from 'react-clock';\nimport { Box } from '@mui/system';\nimport { nanoid } from \"nanoid\";\nimport 'react-clock/dist/Clock.css';\nimport { Container } from '@mui/material';\n\nfunction Form(props) {\n\n    const [name, setName] = useState('')\n\n    function handleChange(e) {\n        setName(e.target.value)\n    }\n\n    function nanTest() {\n        let a = nanoid()\n        alert(a)\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        props.addTask(name);\n        setName(\"\");\n    }\n\n    function randomNumber() {\n        let a = Math.ceil(Math.random() * 1000);\n        alert(`Your Lucky Number is ${a}`)\n    }\n   \n    \n    const MyClock = () => {\n      const [value, setValue] = useState(new Date());\n    \n      useEffect(() => {\n        const interval = setInterval(\n          () => setValue(new Date()),\n          1000\n        );\n    \n        return () => {\n          clearInterval(interval);\n        }\n      }, []);\n    \n      return (\n       \n  <Clock value={value}  />\n      \n      )\n    }\n    return (<>   <MyClock style={{margin:\"auto\",width:\"40%\"}}/>\n        <form onSubmit={handleSubmit} required>\n   \n            <h2 className=\"label-wrapper\">  \n         \n                <label htmlFor=\"new-todo-input\" className=\"label__lg\">What needs to be done?</label>\n            </h2>\n          \n            <input\n\n                type=\"text\"\n                id={Math.ceil(Math.random() * 1000)}\n                className=\"input input__lg\"\n                name=\"text\"\n                autoComplete=\"off\"\n                value={name}\n                onChange={handleChange}\n\n            />\n            <div class=\"button__wrap\"><button className=\"button btn btn__primary btn__lg\" \n            type=\"submit\">ADD</button>\n    <div class=\"button__shadow\"></div>\n</div>\n          \n            \n\n        </form>\n        </>\n    )\n}\n\nexport default Form;","import React, { useState } from \"react\";\nimport Todo from \"./components/Todo\";\nimport FilterButton from \"./components/FilterButton\";\nimport Form from \"./components/Form\";\nimport { nanoid } from \"nanoid\";\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n\nfunction toggleTaskCompleted(id) {\n\n    const updatedTasks = tasks.map(task => {\n      //if the task has matching id, \n      if (id === task.id) {\n        //use object spread to make a new object \n        // whoos completed prop has been inverted and\n       return {\n          ...task, completed: !task.completed\n        }\n      }\n      return task;\n    })\n    setTasks(updatedTasks)\n    \n  }\n\n  const taskList = tasks.filter(FILTER_MAP[filter])\n    .map(task => (\n      <Todo\n        id={task.id}\n        name={task.name}\n        completed={task.completed}\n        key={task.id}\n        toggleTaskCompleted={toggleTaskCompleted}\n        deleteTask={deleteTask}\n        editTask={editTask} />))\n// list of filter types\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter} />\n  ));\n\n  const tasksNoun = taskList.length > 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  function addTask(name) {\n\n    if (name.length === 0) {\n      return\n    }\n\n    const newTask = {\n      id: 'todo-' + nanoid(), name: name, completed: false\n    };\n    setTasks([...tasks, newTask]);\n  }\n\n  //deletes a todo by filtering the todosId\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks)\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task, name: newName }\n      }\n      return task;\n    })\n    setTasks(editedTaskList)\n  }\n\n  return (\n\n    <div className=\"todoapp stack-large\">\n\n      {taskList.length > 0 ? (<h1>{headingText}</h1>) : (<h1>You don't have anything to do</h1>)}\n      \n      <Form addTask={addTask} />\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n      {filterList}\n    </div>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from '@mui/material/styles';\n\nconst DATA = [\n\n];\n\nReactDOM.render(\n\n  <React.StrictMode>\n     <ThemeProvider >\n    <App tasks={DATA} />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}