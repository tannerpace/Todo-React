{"ast":null,"code":"var _jsxFileName = \"/Users/tan/Documents/GitHub/Todo-React/todo-app/src/components/Todo.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction usePrevious(value) {\n  _s();\n\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\n_s(usePrevious, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\nexport default function Todo(props) {\n  _s2();\n\n  const [isEditing, setEditing] = useState(false);\n  const [newName, setNewName] = useState('');\n  const wasEditing = usePrevious(isEditing);\n  const editFeildRef = useRef(null);\n  const editButtonRef = useRef(null);\n\n  function handleChange(e) {\n    setNewName(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.editTask(props.id, newName);\n    setNewName('');\n    setEditing(false);\n  }\n\n  const editingTemplate = /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"stack-small\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"todo-label\",\n        htmlFor: props.id,\n        children: [\"Hi enter a new name for \", props.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: props.id,\n        className: \"todo-text\",\n        type: \"text\",\n        value: newName,\n        onChange: handleChange,\n        ref: editFeildRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn todo-cancel\",\n        onClick: () => setEditing(false),\n        children: [\"Cancel\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: [\"renaming \", props.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn__primary todo-edit\",\n        children: [\"Save\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: [\"new name for \", props.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n\n  const viewTemplate = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stack-small\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"c-cb\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: props.id,\n        type: \"checkbox\",\n        defaultChecked: props.completed,\n        onChange: () => props.toggleTaskCompleted(props.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"todo-label\",\n        htmlFor: props.id,\n        children: props.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn\",\n        onClick: () => setEditing(true),\n        ref: editButtonRef,\n        children: [\"Edit \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: props.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn__danger\",\n        onClick: () => props.deleteTask(props.id),\n        children: [\"Delete \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: props.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n\n  useEffect(() => {\n    if (!wasEditing && isEditing) {\n      editFeildRef.current.focus();\n    } else {\n      editButtonRef.current.focus();\n    }\n  }, [isEditing]);\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"todo \",\n    children: isEditing ? editingTemplate : viewTemplate\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(Todo, \"ZPSrUH31H6phqe6vF9Js10XVQvc=\", false, function () {\n  return [usePrevious];\n});\n\n_c = Todo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"sources":["/Users/tan/Documents/GitHub/Todo-React/todo-app/src/components/Todo.js"],"names":["React","useState","useRef","useEffect","usePrevious","value","ref","current","Todo","props","isEditing","setEditing","newName","setNewName","wasEditing","editFeildRef","editButtonRef","handleChange","e","target","handleSubmit","preventDefault","editTask","id","editingTemplate","name","viewTemplate","completed","toggleTaskCompleted","deleteTask","focus"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\n\nfunction usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current\n}\n\n\n\nexport default function Todo(props) {\n    const [isEditing, setEditing] = useState(false)\n    const [newName, setNewName] = useState('');\n    const wasEditing = usePrevious(isEditing);\n\n    const editFeildRef = useRef(null);\n    const editButtonRef = useRef(null);\n\n    function handleChange(e) {\n        setNewName(e.target.value)\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault()\n        props.editTask(props.id, newName);\n        setNewName('');\n        setEditing(false);\n    }\n\n    const editingTemplate = (\n        <form className=\"stack-small\" onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n                <label className=\"todo-label\" htmlFor={props.id}>\n                    Hi enter a new name for {props.name}\n                </label>\n                <input id={props.id}\n                    className=\"todo-text\"\n                    type=\"text\"\n                    value={newName}\n                    onChange={handleChange}\n                    ref={editFeildRef} />\n            </div>\n            <div className=\"btn-group\">\n                <button type=\"button\" className=\"btn todo-cancel\" onClick={() => setEditing(false)}>\n                    Cancel\n                    <span className=\"visually-hidden\">renaming {props.name}</span>\n                </button>\n                <button type=\"submit\" className=\"btn btn__primary todo-edit\">\n                    Save\n                    <span className=\"visually-hidden\">new name for {props.name}</span>\n                </button>\n            </div>\n        </form>\n    );\n    const viewTemplate = (\n        <div className=\"stack-small\">\n            <div className=\"c-cb\">\n                <input\n                    id={props.id}\n                    type=\"checkbox\"\n                    defaultChecked={props.completed}\n                    onChange={() => props.toggleTaskCompleted(props.id)}\n                />\n                <label className=\"todo-label\" htmlFor={props.id}>\n                    {props.name}\n                </label>\n            </div>\n            <div className=\"btn-group\">\n                <button type=\"button\"\n                    className=\"btn\"\n                    onClick={() => setEditing(true)}\n                    ref={editButtonRef}\n                >\n                    Edit <span className=\"visually-hidden\">{props.name}</span>\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"btn btn__danger\"\n                    onClick={() => props.deleteTask(props.id)}\n                >\n                    Delete <span className=\"visually-hidden\">{props.name}</span>\n                </button>\n            </div>\n        </div>\n    );\n    useEffect(() => {\n\n        if (!wasEditing && isEditing) {\n            editFeildRef.current.focus()\n        } else {\n            editButtonRef.current.focus()\n        }\n    }, [isEditing])\n\n    return (\n        <li className=\"todo \">\n            {isEditing ? editingTemplate : viewTemplate}\n\n        </li>\n    );\n}"]},"metadata":{},"sourceType":"module"}