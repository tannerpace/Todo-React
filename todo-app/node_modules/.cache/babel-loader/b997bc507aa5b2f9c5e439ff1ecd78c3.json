{"ast":null,"code":"var _jsxFileName = \"/Users/tan/Documents/GitHub/Todo-React/todo-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Todo from \"./components/Todo\";\nimport FilterButton from \"./components/FilterButton\";\nimport Form from \"./components/Form\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  const [tasks, setTasks] = useState(props.tasks);\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      //if the task has matching id, \n      if (id === task.id) {\n        //use object spread to make a new object \n        // whoos completed prop has been inverted and\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n    console.log(tasks[0]);\n  }\n\n  const taskList = tasks.map(task => /*#__PURE__*/_jsxDEV(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this));\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  function addTask(name) {\n    if (name.length === 0) {\n      return;\n    }\n\n    const newTask = {\n      id: 'todo-' + nanoid(),\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  }\n\n  function deleteTask(id) {\n    console.log(id);\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoapp stack-large\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: headingText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      role: \"list\",\n      className: \"todo-list stack-large stack-exception\",\n      \"aria-labelledby\": \"list-heading\",\n      children: taskList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"pjFsLTHS1Kjd+NDyC2kZTexpLic=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tan/Documents/GitHub/Todo-React/todo-app/src/App.js"],"names":["React","useState","Todo","FilterButton","Form","nanoid","App","props","tasks","setTasks","toggleTaskCompleted","id","updatedTasks","map","task","completed","console","log","taskList","name","deleteTask","tasksNoun","length","headingText","addTask","newTask","remainingTasks","filter"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,SAASC,MAAT,QAAuB,QAAvB;;;AAGA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAClB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAACM,KAAK,CAACC,KAAP,CAAlC;;AAGA,WAASE,mBAAT,CAA6BC,EAA7B,EAAiC;AAE/B,UAAMC,YAAY,GAAGJ,KAAK,CAACK,GAAN,CAAUC,IAAI,IAAI;AACrC;AACA,UAAIH,EAAE,KAAKG,IAAI,CAACH,EAAhB,EAAoB;AAClB;AACA;AAEA,eAAO,EACL,GAAGG,IADE;AACIC,UAAAA,SAAS,EAAE,CAACD,IAAI,CAACC;AADrB,SAAP;AAGD;;AACD,aAAOD,IAAP;AACD,KAXoB,CAArB;AAYAL,IAAAA,QAAQ,CAACG,YAAD,CAAR;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYT,KAAK,CAAC,CAAD,CAAjB;AACD;;AAGD,QAAMU,QAAQ,GAAGV,KAAK,CAACK,GAAN,CAAUC,IAAI,iBAC7B,QAAC,IAAD;AACE,IAAA,EAAE,EAAEA,IAAI,CAACH,EADX;AAEE,IAAA,IAAI,EAAEG,IAAI,CAACK,IAFb;AAGE,IAAA,SAAS,EAAEL,IAAI,CAACC,SAHlB;AAKE,IAAA,mBAAmB,EAAEL,mBALvB;AAME,IAAA,UAAU,EAAEU;AANd,KAION,IAAI,CAACH,EAJZ;AAAA;AAAA;AAAA;AAAA,UADe,CAAjB;AAQA,QAAMU,SAAS,GAAGH,QAAQ,CAACI,MAAT,KAAoB,CAApB,GAAwB,OAAxB,GAAkC,MAApD;AACA,QAAMC,WAAW,GAAI,GAAEL,QAAQ,CAACI,MAAO,IAAGD,SAAU,YAApD;;AAEA,WAASG,OAAT,CAAiBL,IAAjB,EAAuB;AAErB,QAAIA,IAAI,CAACG,MAAL,KAAgB,CAApB,EAAuB;AACrB;AACD;;AAED,UAAMG,OAAO,GAAG;AACdd,MAAAA,EAAE,EAAE,UAAUN,MAAM,EADN;AACUc,MAAAA,IAAI,EAAEA,IADhB;AACsBJ,MAAAA,SAAS,EAAE;AADjC,KAAhB;AAGAN,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWiB,OAAX,CAAD,CAAR;AACD;;AAED,WAASL,UAAT,CAAoBT,EAApB,EAAwB;AACtBK,IAAAA,OAAO,CAACC,GAAR,CAAYN,EAAZ;AACA,UAAMe,cAAc,GAAGlB,KAAK,CAACmB,MAAN,CAAab,IAAI,IAAIH,EAAE,KAAKG,IAAI,CAACH,EAAjC,CAAvB;AACAF,IAAAA,QAAQ,CAACiB,cAAD,CAAR;AACD;;AAMD,sBACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA,4BACE;AAAA,gBAAKH;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AAAM,MAAA,OAAO,EAAEC;AAAf;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,SAAS,EAAC,uCAFZ;AAGE,yBAAgB,cAHlB;AAAA,gBAKGN;AALH;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GAtEQZ,G;;KAAAA,G;AAuET,eAAeA,GAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Todo from \"./components/Todo\";\nimport FilterButton from \"./components/FilterButton\";\nimport Form from \"./components/Form\";\nimport { nanoid } from \"nanoid\";\n\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n\n\n  function toggleTaskCompleted(id) {\n\n    const updatedTasks = tasks.map(task => {\n      //if the task has matching id, \n      if (id === task.id) {\n        //use object spread to make a new object \n        // whoos completed prop has been inverted and\n\n        return {\n          ...task, completed: !task.completed\n        }\n      }\n      return task;\n    })\n    setTasks(updatedTasks)\n    console.log(tasks[0])\n  }\n\n\n  const taskList = tasks.map(task => (\n    <Todo\n      id={task.id}\n      name={task.name}\n      completed={task.completed}\n      key={task.id}\n      toggleTaskCompleted={toggleTaskCompleted}\n      deleteTask={deleteTask} />))\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  function addTask(name) {\n\n    if (name.length === 0) {\n      return\n    }\n\n    const newTask = {\n      id: 'todo-' + nanoid(), name: name, completed: false\n    };\n    setTasks([...tasks, newTask]);\n  }\n\n  function deleteTask(id) {\n    console.log(id)\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks)\n  }\n\n\n\n\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>{headingText}</h1>\n      <Form addTask={addTask} />\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n\n      </ul>\n    </div>\n  );\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}