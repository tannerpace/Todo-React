{"ast":null,"code":"var _jsxFileName = \"/Users/tan/Documents/GitHub/Todo-React/todo-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Todo from \"./components/Todo\";\nimport FilterButton from \"./components/FilterButton\";\nimport Form from \"./components/Form\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n_c = FILTER_NAMES;\n\nfunction App(props) {\n  _s();\n\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      //if the task has matching id, \n      if (id === task.id) {\n        //use object spread to make a new object \n        // whoos completed prop has been inverted and\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  const taskList = tasks.filter(FILTER_MAP[filter]).map(task => /*#__PURE__*/_jsxDEV(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    editTask: editTask\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 7\n  }, this)); // list of filter types\n\n  const filterList = FILTER_NAMES.map(name => /*#__PURE__*/_jsxDEV(FilterButton, {\n    name: name,\n    isPressed: name === filter,\n    setFilter: setFilter\n  }, name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this));\n  const tasksNoun = taskList.length > 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  function addTask(name) {\n    if (name.length === 0) {\n      return;\n    }\n\n    const newTask = {\n      id: 'todo-' + nanoid(),\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  } //deletes a todo by filtering the todosId\n\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task,\n          name: newName\n        };\n      }\n\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoapp stack-large\",\n    children: [taskList.length > 0 ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: headingText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 31\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"You don't have anything to do\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 58\n    }, this), filterList, /*#__PURE__*/_jsxDEV(Form, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      role: \"list\",\n      className: \"todo-list stack-large stack-exception\",\n      \"aria-labelledby\": \"list-heading\",\n      children: taskList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"EeRnFHbkPD5i3v9CpmwzSMi80Ig=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FILTER_NAMES\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/tan/Documents/GitHub/Todo-React/todo-app/src/App.js"],"names":["React","useState","Todo","FilterButton","Form","nanoid","FILTER_MAP","All","Active","task","completed","Completed","FILTER_NAMES","Object","keys","App","props","tasks","setTasks","filter","setFilter","toggleTaskCompleted","id","updatedTasks","map","taskList","name","deleteTask","editTask","filterList","tasksNoun","length","headingText","addTask","newTask","remainingTasks","newName","editedTaskList"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Todo from \"./components/Todo\";\nimport FilterButton from \"./components/FilterButton\";\nimport Form from \"./components/Form\";\nimport { nanoid } from \"nanoid\";\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n\n  function toggleTaskCompleted(id) {\n\n    const updatedTasks = tasks.map(task => {\n      //if the task has matching id, \n      if (id === task.id) {\n        //use object spread to make a new object \n        // whoos completed prop has been inverted and\n        return {\n          ...task, completed: !task.completed\n        }\n      }\n      return task;\n    })\n    setTasks(updatedTasks)\n\n  }\n\n  const taskList = tasks.filter(FILTER_MAP[filter])\n    .map(task => (\n      <Todo\n        id={task.id}\n        name={task.name}\n        completed={task.completed}\n        key={task.id}\n        toggleTaskCompleted={toggleTaskCompleted}\n        deleteTask={deleteTask}\n        editTask={editTask} />))\n  // list of filter types\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter} />\n  ));\n\n  const tasksNoun = taskList.length > 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  function addTask(name) {\n\n    if (name.length === 0) {\n      return\n    }\n\n    const newTask = {\n      id: 'todo-' + nanoid(), name: name, completed: false\n    };\n    setTasks([...tasks, newTask]);\n  }\n\n  //deletes a todo by filtering the todosId\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks)\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task, name: newName }\n      }\n      return task;\n    })\n    setTasks(editedTaskList)\n  }\n\n  return (\n\n    <div className=\"todoapp stack-large\">\n\n      {taskList.length > 0 ? (<h1>{headingText}</h1>) : (<h1>You don't have anything to do</h1>)}\n      {filterList}\n      <Form addTask={addTask} />\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n\n    </div>\n  );\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}